      SUBROUTINE REJECT(V, KDPSI,NG,DOP,MXDOP,IRJ,SGMT,NGR,VV,ISWT,
     1 IZO,NM,NBI,IR, MXROW,A,C,W,IS,ITRM, IOUT)
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*10 NM
C
C   VERSION: 01/10/83                  GEODOP V
C   MODIFIED FOR RUNNING ON IBM FORTRAN (G1 OR Q COMPILERS).
C   B. ARCHINAL, DEPT. OF GEODETIC SCIENCE AND SURVEYING,
C   THE OHIO STATE UNIVERSITY, COLUMBUS, OHIO.
C
C   SUBPROGRAMS USED:
C    FORTRAN:        ABS
C
C
C  DATA SCREENING SUBROUTINE
C
C   V    RESIDUALS
C   KDPSI  INDEX VECTOR OF USED DOPPLERS
C   NG     INDEX VECTOR OF USED DOPPLERS PER INTERVAL  MULT STA SOLUT
C   DOP    OBSERVATIONS
C   MXDP   DIMENSION OF NG, DOP, KDPSI, V PER SATION
C   IVRJ   NO OF REJECTIONS
C   SGMT   UPPER STAT LIMLIT
C   NGR    NO OF OBSERVATIONS PER STAION
C   ISWT   SWITCH NE 0 REJECT MAXIMUM RESID ONLY  =0 REJECT ALL OUTLAYER
C   IZO  =1  NO REJECTION ACCURED    =0  REJECTION ENCOUNTERED
C
      DIMENSION V(1), KDPSI(1), NG(1), DOP(1)
      DIMENSION W(1), A(MXROW,3), C(MXROW,NBI)
      RMX=0.D0
      VV=0.
      RMX2=0.D0
      J=1
      DO 1 I=1,MXDOP
      II= IR +I - 1
      IF(DOP(I).EQ.0.D0) GO TO 2
      RR=DABS(V(J))
      IF(RR.GT.SGMT.AND.ISWT.EQ.0) GO TO 3
      IF(NG(IS+J).LT.ITRM) GO TO 13
      IF(RR.LE.RMX) GO TO 11
      RMX2= RMX
      K2= K
      K=I
      RMX=RR
      GO TO 2
11      CONTINUE
      IF(RR.LE.RMX2) GO TO 2
      K2= I
      RMX2=RR
      GO TO 2
3     IRJ= IRJ +1
      WRITE(IOUT,5) V(J), NM,I,IRJ
13    DOP(I)= 0.D0
      IZO=0
      KDPSI(I)=0
      NG(I+IS)= NG(IS+I)-1
      NGR= NGR- 1
      W(J)= 0.D0
      DO 8 L=1,3
8      A(II,L)= 0.D0
      DO 9 L=1, NBI
9      C(II,L)= 0.D0
2     VV= VV + V(J)*V(J)
      J= J+1
1     CONTINUE
      KD= (K2- K)**2
      IF(ISWT.EQ.0) GO TO 4
C   MAXIMUM RESIDUALS ONLY
      IF(RMX.LE.SGMT) GO TO 4
10      DOP(K)= 0.D0
      IZO=0
      KDPSI(K)=0
      NG(K+IS)= NG(K+IS) -1
      IRJ= IRJ+1
      NGR= NGR-1
      II= K+IR -1
      W(K)= 0.D0
      DO 6 L=1,3
6      A(II,L)= 0.D0
      DO 7 L=1, NBI
7      C(II,L)= 0.D0
      WRITE(IOUT,5)V(K), NM, K, IRJ
5     FORMAT(1H ,25H ****REJECTED AT 99:  V=,F10.1, 8H  ST. # ,A8,8H  DO
     1P # ,I4, 14H -REJECTION # ,I4)
      IF(KD.LT.4) GO TO 4
      IF(RMX2.LE.SGMT) GO TO 4
      K= K2
      KD= 0
      GO TO 10
4     RETURN
      END
      SUBROUTINE RESID(P, PSC, MXDP, LOK, DT, PD, NST, DTS, NSTA, V, VS
     1 , MGR, KDPSI, LOKMN,RLO)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C   VERSION: 01/10/83                  GEODOP 5.08   (APR82)
C   MODIFIED FOR RUNNING ON IBM FORTRAN (G1 OR Q COMPILERS).
C   B. ARCHINAL, DEPT. OF GEODETIC SCIENCE AND SURVEYING,
C   THE OHIO STATE UNIVERSITY, COLUMBUS, OHIO.
C
C   SUBPROGRAMS USED:
C    FORTRAN:        SQRT
C
C    SUBROUTINE RESID
C   COMPUTES INTERFEROMETRIC RESIDUALS
      DIMENSION P(1), PSC(1), LOK(1), DT(1), PD(1), V(1), VS(1), MGR(1)
     1 , KDPSI(1)
      REAL *8 LOK
      DO  1 I=1, NST
1      VS(I)= 0.D0
      LRW= 0
      DO 2 IS=1,NSTA
      IF(MGR(IS).EQ.0) GO TO 2
      IPS= PD(IS)/1000
      PS= IPS/10.D0
      RSS= PD(IS)-IPS*1000
       PDD= RLO/DSQRT(2.D0*PS*PS+ RSS*RSS) *1.D 02
      TI= LOK(IS) - LOKMN
      KKK= 0
      IST= (IS-1)* MXDP
      MGRI= MGR(IS)
      DO 3 L=1,MGRI
      LRW= LRW +1
      M= IST + L
      TE= TI + DT(M)
      I= (TI +.05D0)/ DTS
      K= TE/ DTS
      J= K-1
      IF(J.LT.I) J=I
      SC= DSQRT(DT(M)/DTS)* KDPSI(M)/ DTS
      DT1=( -TI+I*DTS+DTS*(K-I))* SC
      DT2= (K-I-1)*DTS*SC *(K-I)
      DT3= (TE-K*DTS)*SC
      I= I +1
      J= J+1
      K= K+1
      JK= KKK+1
      PJK= P(JK)*V(LRW)*PDD
      VS(I)= VS(I) - DT1* PJK* PSC(I)
      VS(J)= VS(J) - DT2* PJK* PSC(J)
      VS(K)= VS(K) - DT3* PJK* PSC(K)
      RNEXT= 0.
      IF(I.GT.MGRI) GO TO 5
      RNEXT= (DTS*SC - DT3)* P(JK +1)* KDPSI(M+1) *PDD
5      CONTINUE
      VS(K)= VS(K) -RNEXT* V(LRW)* PSC(K)
      TI= TE
      KKK= KKK+ MXDP-L +1
3      CONTINUE
2      CONTINUE
C    COMPUTE RESIDULAS
       LRW=0
       DO 12 IS=1,NSTA
       IF(MGR(IS).EQ.0) GO TO 12
       IPS= PD(IS)/1000
       PS= IPS/10.D0
       RSS= PD(IS)-IPS*1000
       PDD= RLO/DSQRT(2.D0*PS*PS+RSS*RSS)*1.D 02
       TI= LOK(IS)- LOKMN
       KKK=0
       IST= (IS-1)*MXDP
       MGRI= MGR(IS)
       DO 13 L=1,MGRI
       LRW= LRW+1
       M= IST+L
       TE= TI + DT(M)
       I= (TI+.05D0)/DTS
       K= TE/DTS
       J= K-1
      IF(J.LT.I) J=I
       SC= DSQRT(DT(M)/DTS)*KDPSI(M)/DTS
       DT1= (-TI+I*DTS+ DTS*(K-I))*SC
       DT2= (K-I-1)*DTS*SC*(K-I)
       DT3= (TE-K*DTS)*SC
       I= I+1
       J= J+1
       K= K+1
       JK= KKK+1
       RNEXT= 0.D0
       IF(I.GT.MGRI) GO TO 15
       RNEXT= (DTS*SC-DT3)* P(JK+1)*KDPSI(M+1)*PDD
15       CONTINUE
      V(LRW)= V(LRW) +PDD* P(JK)* (DT1*VS(I) + DT2* VS(J) + DT3*VS(K))+
     1 RNEXT* VS(K)
      TI= TE
      KKK= KKK+MXDP-L+1
13       CONTINUE
12       CONTINUE
      RETURN
      END
      SUBROUTINE RINPT(MXPS,MXDOP,ND, DOP,NDESC,ISHRT,IEND,NOBR,
     1 KDPSI,NG,DMET,LOK,NSEW,MGR,INJ,NTEST,LOKPR,ITRM,LOKMN,DTM,MSTA
     2,FST, EPOCH, JST, ISCN,ISRC)
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*10 NDESC,N,NOBR
      CHARACTER*4 ISRC, IFT
C
C   VERSION: 01/28/83                  GEODOP 5.09 (OCT82)
C   MODIFIED FOR RUNNING ON IBM FORTRAN (G1 OR Q COMPILERS).
C   B. ARCHINAL, DEPT. OF GEODETIC SCIENCE AND SURVEYING,
C   THE OHIO STATE UNIVERSITY, COLUMBUS, OHIO.
C
C   FOR G1 OPERATION:
C   1. "IT2" LOCATION CHANGED IN "SAT" LABELED COMMON TO GIVE
C      CORRECT ALIGNMENT.
C
C     INPUT  SUBROUTINE
C
      DIMENSION  DMET(3,MXPS),CXYZ(10,3),LOK(1),NSEW(1)
      DIMENSION  DOP(MXDOP,MXPS),ISHRT(MXDOP,MXPS), ND ( 1),ORBIT( 7)
     1,NOBR( 1), KDPSI(MXDOP,MXPS),NG(1),DT(4),DXS(3),MGR(1),IFT(4)
     2, NTEST(1), FST(3,17)
C
      REAL *8 ISHRT, LOK
C     COMMON BLOCKS
C
      COMMON /OPT/ ASG,HOR, SIGA,A1,ESQ,DXS,        TE,XP99,RT,ALG,ACR,
     1OUT, RHO, FO,XLO, PI, WE, RADG, SGMT, ITTG, ITRIM, IWRT,IOUT,INPT,
     2 NROW
C
      COMMON /COUNT/ NGRPTS,MACOL,MCCOL,MROW,IPASSC,IACCC, IPASS, NREJT,
     1NDFRJ, IELEV, IVRJ, MDFM, NPTS, ISEQ, IACC, NORB
C
C
      COMMON /SAT/ LOKR,IMIN,IST,IT2,FS,NSTA,NDP ,CXYZ,DT,BIT,CMIN,
     1  ORBIT, CPA, IORD
      DATA IFT/'    ','BFIT','BFIT','PSYN'/
C
C
C     NDESC - FIGURE NAME AND SOURCE OF ORBIT, IST- SAT, LOKR- REF.TIME,
C     IMIN- TIME SPAN OF ORB.FIT(MIN), INJ-INJECTION ,FS- SAT FQCY,
    7 IACTIV=0
      IEND=0
      DO 1  J=1,MXDOP
      NG(J)=0
      DO 1 I=1,NGRPTS
      DOP(J,I)=0.D0
      KDPSI(J,I)=0
1     CONTINUE
      READ(INPT,END=64)NDESC,ISRC,IST,INJ,LOKR,IMIN,YR,NSTA,ORBIT,NROW
     @,((CXYZ(I,J),I=1,IORD),J=1,3), ( MGR(I),I=1,NSTA)
C     IF(EOF(INPT)) 64,136
C136  CONTINUE
      IF(YR.GT.1960.D0.AND.YR.LE.2000.D0) OUT= YR
C  SET REFERENCE TIME  LOKPR FOR FDI
      IF(IPASS.NE.IPASSC) GO TO 83
      LOKPR=LOKR
      IACCPR= 0
      ISRJCT= 0
83      CONTINUE
C     CHECK FOR 10 SUBSEQUENT REJECTIONS
      IF(IACCPR.LT.IACC) GO TO 80
C  ISRJCT - NO. OF SUBSEQUENT REJECTIONS (PASSES)
      ISRJCT= ISRJCT +1
      IF(ISRJCT.GT.10) GO TO 64
      GO TO 81
80     IACCPR= IACC
      ISRJCT= 0
81    CONTINUE
      IPASS= IPASS+1
      IF(IACTIV.EQ.0) GO TO 9
      IF((IPASS-IPASSC).GT.20.AND.(IACC-IACCC).LE.2) GO TO 64
9     CONTINUE
      IF(INJ.LT.0) INJ= 0
      CALL DIME(INJ,IDYJ,IHRJ,IMNJ)
      CALL DIME(LOKR,IDYR,IHR,IMNR)
      IF(ITTG.NE.5)  WRITE(IOUT,91)
   91 FORMAT(1H1)
C  NROW  TROUBLE  FLAG  .NE.0  BAD FIT(B-FIT) FOR VAR PARAMETERS
      IF(NROW.LT.0) NROW= 0
      I= NROW +1
      IF(I.EQ.9) I= 4
      IF(I.GT.4) I= 1
      IYR= OUT
C   FIND SATELLITE
      DO 85 JST=1,17
      IF(IST.EQ.IDINT(FST(3,JST)+.5D0)) GO TO 86
85    CONTINUE
86    TOO= LOKR
      DIFD= TOO/1440.D0-EPOCH+(OUT-1979.D0)*365.2425D0+ 43874.D0
      FS= FST(1,JST) + FST(2,JST)*DIFD*.04D0
C  CHECK IF MESSAGE & INPUT(DEFAULT) SAT FREQUENCY ARE COMPATIBLE
C        IF NOT & MESSAGE FREQUENCY IS < 24 000 USE MESSAGE INSTEAD
C
      IF(DABS(YR).LT.24000.D0) GO TO 90
C
C ASSUMING YR IS THE MESSAGE SAT. FREQUENCY ?
C
      IF(DABS(FS-YR).LT..5D0) GO TO 90
C RESET SAT. FREQ. TO MESSAGE
      FS= YR
      FST(1,JST) = FS
      EPOCH = TOO/1440.D0+(OUT-1979.D0)*365.25D0 + 43874.D0
90    CONTINUE
      WRITE(IOUT,92) IST,IYR,IDYR,IHR,IMNR,NDESC,ISRC,IMIN,IHRJ,IMNJ,
     1FS,IFT(I), IPASS
      WRITE(ISCN,192) IPASS,IST,IYR,IDYR,IHR,IMNR,NDESC,ISRC,IMIN,IHRJ,
     1IMNJ,FS,IFT(I)
92     FORMAT(1H0,//5X,I3,I8,I5,I5,I3,5X,7H  FIG= ,A10,4X,5HORB= ,A4,
     12X,5HSPAN;,I3,2X,7HINJECT;,2I3,2X,7HS-FQCY;,F8.1,3X,A5,4X, 5HPASS#
     2,I4)
192     FORMAT(//7H  PASS#,I4,I5,I8,I5,I5,I3,3X,7H  FIG= ,A10,4X,5HORB= ,
     1A4,2X,5HSPAN;,I3,2X,7HINJECT;,2I3,2X,7HS-FQCY;,F8.1,3X,A5)
      SUMIS=0.D0
      ISM= 0
C   EXTENDED OUTPUT FORMAT
      IF(ITTG.NE.1) GO TO 3
      WRITE(IOUT,93)
      WRITE(IOUT,94)  CXYZ
93    FORMAT(1H0,10X,35HCHEBYSHEV COEFFICIENTS OF X,Y,Z FIT)
95    FORMAT(1H0,10X,39HDOPPLER COUNTS AND TIME INTERVALS( MIN))
94      FORMAT(1H , 8F12.2,2F8.2)
3      CONTINUE
      DO 2 II=1,NSTA
      I= II
      ND(I)=0
      NDD= MGR(I)
C  IF MGR.NE.0 READ MGR DOPPLERS AT THE CURRENT STATION  I
      IF(MGR(I).EQ.0) GO TO 2
      READ(INPT,END=64)N,LOK(I),(DMET(K,I),K=1,3),NSEW(I),FDI
     1,IT,( DOP(J,I),J=1,NDD),(ISHRT(J,I),J=1,IT)
C     IF(EOF(INPT)) 64,135
C135  CONTINUE
C    CHECK FOR STATION SEQUENCE
      IF(N.EQ.NOBR(I)) GO TO 5
      K=0
      KK= I - 1
      DO 111 J=1, KK
      IF(N.EQ.NOBR(J)) K=J
111     CONTINUE
      IF(K.EQ.0) GO TO 112
C    DATA MATCHED WITH K- SATATION
      LOK(K)= LOK(I)
       DO 113 J=1,3
113      DMET(J,K)= DMET(J,I)
      NSEW(K)= NSEW(I)
      DO 114 J=1,NDD
114      DOP(J,K)= DOP(J,I)
      DO 115 J=1,IT
115      ISHRT(J,K)= ISHRT(J,I)
      MGR(K)= MGR(I)
      MGR(I)= 0
      I= K
      GO TO 5
112      CONTINUE
      WRITE(IOUT,20) N,NOBR(I)
      GO TO 64
 5    CONTINUE
20    FORMAT(1H0,31H **** WRONG STATION NAME TAPE5=,A10,13H COORD CARD =
     1,A10)
C  REINITILIZE ISHRT(1)
      IF(IT.EQ.0) ISHRT(1,I)= DT(1)
      IF( IST.NE.75.OR.NROW.LT.7) GO TO 10
      ILK= LOK(I) + .1D0
      ILK= (ILK/2)*2
      ICOR= (LOK(I)-ILK)*60 +1.D0
      ICOR=(ICOR/30)*30
      LOK(I)= LOK(I) -ICOR/60.D0
      NROW=0
10      CONTINUE
      IF(ITTG.NE.1) GO TO 4
      WRITE(IOUT,97) NOBR(I), LOK(I),(DMET(K,I),K=1,3),NSEW(I), FDI
     1,NDD, IT ,ORBIT
      WRITE(IOUT,95)
                    WRITE(IOUT,96) (DOP(J,I), ISHRT(J,I),J=1,NDD)
    4  CONTINUE
97    FORMAT(1H0,A10,F14.6,F8.1,2F5.1,I3,F8.2,2I3,F10.4,6F10.6)
96    FORMAT(1H ,(20X,4(F12.1,F12.7)))
      IF( NDD.EQ.0) GO TO 2
      DO 6 J=1,NDD
C   CHECK FOR REASONABLE DELTA T
      IF(ISHRT(J,I).GT.5.D0)  ISHRT(J,I)= .1D0
      IF(ISHRT(J,I).LT..1D0)       ISHRT(J,I)= .1D0
      IF(DOP(J,I).EQ.0) GO TO 6
      KDPSI(J,I)=1
      ND(I)= ND(I)+1
      SUMIS= SUMIS+ ISHRT(J,I)
      ISM= ISM +1
6     CONTINUE
      IF(NTEST(I).NE.10) GO TO 8
      ND(I)= 0
      MGR(I)= 0
      GO TO 2
    8 IACTIV=IACTIV+1
2     CONTINUE
      IF(IACTIV .LT.MSTA) GO TO 7
C
      DTM= SUMIS/ ISM
C   FIND MIN LOK ON TIME LOKMN
      LOKMN= 1000000
      DO 22 I=1, NGRPTS
      IF(ND(I).EQ.0 ) GO TO 22
      IF(LOKMN.GE.IDINT(LOK(I)+.05D0))LOKMN= (LOK(I)+ .05D0)
22      CONTINUE
C   ALIGN DOPPLERS APPROX. ACCORDING TO CORR. DOP. COUNTS
      DO 23 I=1,NGRPTS
      IF(ND(I).EQ.0) GO TO 23
      IS= IDINT((LOK(I)+.05D0-LOKMN)/DTM)
      NDD= MGR(I)
      DO  24 J=1,NDD
      IF(KDPSI(J,I).EQ.0) GO TO 24
      NG(IS+J)= NG(IS+J) +1
24      CONTINUE
23     CONTINUE
C
C  TRIM TO ITRM SIM. DOPPLERS
C  MIND- MIN. NO. OF DOPP. COUNTS PER STATION
      MIND= 2.5D0/ DTM
      IF(IACTIV .LT.ITRM) GO TO 107
      DO 25 I=1,NGRPTS
       IF(NTEST(I).EQ.10) GO TO 25
      IF(ND(I).EQ.0) GO TO 25
      IS= IDINT((LOK(I)+.05D0-LOKMN)/DTM)
      NDD= MGR(I)
      DO 26 J=1,NDD
      IF(KDPSI(J,I).EQ.0) GO TO 26
      IF(NG(IS+J).GE.ITRM) GO TO 26
      NG(IS+J)=NG(IS+J)- 1
      KDPSI(J,I)= 0
      ND(I)= ND(I)-1
      DOP(J,I)= 0.D0
26      CONTINUE
      IF(ND(I).GT.MIND) GO TO 25
      ND(I)= 0
      MGR(I)= 0
25      CONTINUE
C
C   IACTIVE-  NO. OF CURRENTLY ACTIVE STATIONS
C   NPTS-     NO. OF ACTIVE(TURNED ON) STATIONS AT INPUT(SEE CONTCD 63-6
C
      IF(IACTIV .GE.MSTA) GO TO 101
107     ISRJCT= ISRJCT- 1
      GO TO 7
64    IEND=1
101   RETURN
      END
      SUBROUTINE STAFIN(WPD, WPDC, MXDOP)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C   VERSION: 01/10/83                  GEODOP IV+V   (JUL81)
C   MODIFIED FOR RUNNING ON IBM FORTRAN (G1 OR Q COMPILERS).
C   B. ARCHINAL, DEPT. OF GEODETIC SCIENCE AND SURVEYING,
C   THE OHIO STATE UNIVERSITY, COLUMBUS, OHIO.
C
C   ADDITIONAL OUTPUT OF AVERAGE WEIGHTS ADDED IN IBM VERSION.
C   (SEE STATEMENTS BETWEEN "C*" LINES.)
C
C   SUBPROGRAMS USED:
C    FORTRAN:        ABS, SQRT
C
C
C   SUBROUTINE COMPUTES WEIGHT MATRIX
C
      DIMENSION WPD(1)        , NO(32), DIAG(32)    ,WPDC(MXDOP,MXDOP)
C
      COMMON /OPT/ ASG, HOR, SIGA, A1, ESQ,DXS(3), TE, XP99, RT, ALG,ACR
     1,OUT, RHO, FO,XLO,PI, WE, RADG, SGMT, ITTG, ITRIM, IWRT, IOUT, INP
     1T, NROW
      IJ= 0
      WRITE( IOUT,55)
55      FORMAT(1H1//40H  STATION STATISTICS                     )
      WRITE(IOUT,52)
C*
      NSUM=0
      N10SUM=0
      SUMNX=0.D0
      ID=1
C*
      DO 1 I=1,MXDOP
      DO 2 J=I,MXDOP
      IJ= IJ + 1
      NO(J)= WPD(IJ)/1000000 + .5D0
2      WPD(IJ)=(WPD(IJ)- NO(J)* 1000000) /(NO(J) +1 )
C*
      N=NO(I)
      NSUM=NSUM+N
      IF(N.LT.10) GO TO 100
      N10SUM=N10SUM+N
      X=WPD(ID)
      SUMNX=SUMNX+N*X
  100 CONTINUE
      ID=ID+MXDOP-I+1
C*
1      WRITE(IOUT,50)  (NO(J),J=I,MXDOP)
50      FORMAT(1H (32I4))
C
C   WRITE MATRIX
      WRITE(IOUT,53)
      IJ= 1
      DO 3 I=1,MXDOP
      IF(WPD(IJ).LT.0.D0) WPD(IJ) =0.D0
      DIAG(I)=DSQRT(WPD(IJ) )
      IF(DIAG(I).EQ.0.D0) DIAG(I)= 99.D0
      IJE= IJ + MXDOP -I
      WRITE(IOUT,51) (WPD(J),J=IJ,IJE)
51      FORMAT(1H (22F6.2))
      IJ= IJE +1
3      CONTINUE
C
      WRITE(IOUT,54)
      IJ= 1
      DO 6 I=1,MXDOP
      IJE= IJ + MXDOP -I
      IJJ= IJ -1
      DO 4 J= IJ,IJE
4      WPD(J) = WPD(J) /DIAG(I)/ DIAG(J-IJ  +I)
      WRITE(IOUT,51)( WPD(J) ,J=IJ,IJE)
      IJ= IJE +1
6      CONTINUE
      WRITE(IOUT,51) (DIAG(I),I=1,MXDOP)
C*
      X=0.D0
      IF(N10SUM.LE.0) GO TO 110
      X=DSQRT(SUMNX/N10SUM)
  110 WRITE(IOUT,901) NSUM,N10SUM,X
  901 FORMAT(/3H N=,I6,20H  N (LIMIT AT 10) = ,I6
     @,35H  UNSCALED WEIGHTED MEAN STD DEV = ,F10.5)
C*
      WRITE( IOUT,56)
56      FORMAT(1H1//40H   INTER-STATION STATISTICS              )
      WRITE(IOUT,52)
C*
      NSUM=0
      N10SUM=0
      SUMNX=0.D0
C*
      DO 11 I=1,MXDOP
      DO 12 J=1,MXDOP
      NO(J)= WPDC(I,J)/ 1000000 + .5D0
12      WPDC(I,J)=(WPDC(I,J)- NO(J)*1000000 )/(NO(J) +1)
C*
      N=NO(I)
      NSUM=NSUM+N
      IF(N.LT.10) GO TO 200
      N10SUM=N10SUM+N
      X=DABS(WPDC(I,I))
      SUMNX=SUMNX+N*X
  200 CONTINUE
C*
11     WRITE(IOUT,50)  (NO(J),J=1,MXDOP)
C
      WRITE(IOUT,53)
      DO 13 I=1,MXDOP
      WRITE(IOUT,51) (WPDC(I,J),J=1,MXDOP)
      DO 14 J=1,MXDOP
14      WPDC(I,J)= WPDC(I,J)/DIAG(I)/DIAG(J)
13      CONTINUE
      WRITE(IOUT,54)
      DO 15 I=1,MXDOP
15      WRITE(IOUT,51) (WPDC(I,J),J=1,MXDOP)
C*
      X=0.D0
      IF(N10SUM.LE.0) GO TO 210
      X=DSQRT(SUMNX/N10SUM)
  210 WRITE(IOUT,901) NSUM,N10SUM,X
C*
52      FORMAT(//20H  NO OF OBSERVATIONS  )
53      FORMAT(//20H  VAR-COV MATRIX      )
54      FORMAT(//20H  CORRELATION MATRIX )
      RETURN
      END
      SUBROUTINE STCORD( ISHRT, MXDOP2, X, NDLY, FDI,   SK,
     1 NG, NGR, KDPSI, ELMAX, ELEV, XS, LOK, GCO, DOP, CS, NAME, MGR,
     2 NTEST, LOKMN, ICPA, DTMM,IS)
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*10 NAME
C
C   VERSION: 03/18/83                  GEODOP 5.02 (OCT81)
C   MODIFIED FOR RUNNING ON IBM FORTRAN (G1 OR Q COMPILERS).
C   B. ARCHINAL, DEPT. OF GEODETIC SCIENCE AND SURVEYING,
C   THE OHIO STATE UNIVERSITY, COLUMBUS, OHIO.
C
C   FOR G1 OPERATION:
C   1. "IT2" LOCATION CHANGED IN "SAT" LABELED COMMON TO GIVE
C      CORRECT ALIGNMENT.
C
C     SUBROUTINE COMPUTES SAT. STATE  VECTOR  XS
C
      DIMENSION   ISHRT(1) , SK(1), KDPSI(1), ELEV(1), XS(MXDOP2,6),DT(4
     1),CS(1),CHEB(10),CXYZ(10,3),DOP(1),DCH(10),ORBIT(7)
      DIMENSION NG(1) ,DXS(3), DX(3), GCO(3) , X(3)
      REAL *8 LO,ISHRT, LOK
C
C     COMMON  AREAS
C
      COMMON /OPT/ ASG,HOR, SIGA,A1,ESQ,DXS, TE,XP99,RT,ALG,ACR, OUT,
     1RHO, FO, LO, PI, WE, RADG, SGMT, ITTG, ITRIM, IWRT,IOUT,INPT,NROW
C
      COMMON /SAT/ LOKR,IMIN,IST,IT2,FS,NSTA,NDP ,CXYZ,DT,BIT,CMIN,
     1 ORBIT,CPA, IORD
C
C     DCOS(X)=COS(X)
C     DSIN(X)=SIN(X)
C     DSQRT(X)=SQRT(X)
      DIST(X1,X2,X3,Y1,Y2,Y3)=DSQRT((Y1-X1)**2+(Y2-X2)**2+(Y3-X3)**2)
C     COMPUTE  APPROXIMATE  COORD. XS   ,  BIT=BIT LENGTH IN MIN
C        CMIN  SPEED OF LIGHT IN MIN
CC  OSCUL. ORB. ELEMENTS REF TIME CPA SINCE LOKR
      CPA= IMIN/2
      MADOP2= MGR +1
      IS= IDINT((LOK+ .05D0 -LOKMN)/DTMM)
      DO 10 J=1,MADOP2
10    SK(J)=0.
      ONE=1.000000D 00  -FDI/4.D 08
      IB=1
      SWTCH=1.000000D 00
C    NTEST= 0    RECEIVER TIME FRAME   CBR
C    NTEST= 1    SATELLITE TIME FRAME   BR
      IF(NTEST.EQ.0 ) GO TO 14
C  ASSUME SAT  TIME  FRAME
      ONE=  .999998021D 00
      SWTCH=     0.D0
14      CONTINUE
      NJET=0
      DET=0.D0
      TK= 2.D0/(IMIN -1)
      T=LOK -LOKR   + NDLY/.60000D 08
2     FORMAT(1H ,30X,27H**** WARNING ****  DOP NO= ,I3,8H ST NO= ,A10,
     128H  OUTSIDE CHEBYSHEV FIT SPAN)
C     DCC= COS*COS, DSC =COS*SIN   DS=SIN  OF LATITUDE  AND LONGITUDE
      SS=DSQRT(X(1)**2+X(2)**2)
      ALAT= GCO(1)
      H   = GCO(3)
      SS=DSQRT(SS**2+(X(3)+(SS/DCOS(ALAT)-H)*ESQ*(DSIN(ALAT)))**2)
      DCC= X(1) /SS
      DCS=X(2) /SS
      DS =DSQRT(1.000000D 00-DCC**2-DCS**2)*ALAT/DABS(ALAT)
      JCPA=1
      KCPA=0
      ICNT= 0
      DO 1 J=1,MADOP2
      T= T +DET
      Y= T    *TK-1.D0
      CALL CHEBY(CHEB,DCH,1,IORD,Y,TK)
      DO 3  L= 1,3
      XS(J,L)= CXYZ(1,L)- DXS(L)
      XS(J,L+3) = 0.D0
      DO 3 K=2,IORD
      XS(J,L+3) = XS(J,L+3 ) + DCH(K)* CXYZ(K,L)
3     XS(J,L)= XS(J,L) +CHEB(K)*CXYZ(K,L)
      SK(J)= DIST(X(1),X(2),X(3) ,XS(J,1),XS(J,2),XS(J,3))
      IF(DABS(ORBIT(1)).GT.1.D-06) GO TO 20
      IF(J.NE.MADOP2/2)GO TO 20
      XD= (XS(J,4)-XS(J,2)*WE)/.600000D 2
      YD= (XS(J,5)+XS(J,1)*WE)/.600000D 2
      ZD= XS(J,6)/.6000000D 2
      ZMU= .3986005D 15
      CALL INITIA(XS(J,1),XS(J,2),XS(J,3),XD,YD,ZD,ZMU,ORBIT(3),VT,O
     1RBIT(4),ORBIT(7),ORBIT(5),AE, ET)
      ORBIT(2)=DSQRT(ZMU/AE**3)*.6000000D 2
      ORBIT(6)= 0.D0
      ORBIT(1)= (ET-ORBIT(3)*DSIN(ET))/ORBIT(2)
      ORBIT(5)= ORBIT(5) + WE*ORBIT(1)
      ORBIT(1)= ORBIT(1)- T
C RESET OSCUL. ELEMENT REF. TIME CPA
      CPA= T
20      CONTINUE
C
C  CORRECT FOR APPARENT ROTATION IN LONG.  DUE TO PROPAGATION DELAY
C
      CDLY= SK(J)/CMIN* WE
      XS(J,1)= XS(J,1) + CDLY* X(2)
      XS(J,2)= XS(J,2) - CDLY* X(1)
      IF(SWTCH.EQ.0.) GO TO 15
      DO 13 K=1,3
13    XS(J,K)= XS(J,K) + XS(J,K+3 )*(SK(  1)-SK(J))/CMIN
      SK(J)= DIST(X(1),X(2),X(3) ,XS(J,1),XS(J,2),XS(J,3))
15    CONTINUE
      DO 16 K=1,3
16    DX(K)= XS(J,K) -X(K)
      EL     = (DX(1)* DCC +DX(2)* DCS +DX(3)* DS )/SK(J)
      CS( J)=(DX(1)*XS(J,4) + DX(2)*XS(J,5 ) +DX(3)* XS(J,6))/SK(J)
      CS(J)= CS(J)/ DIST(0.D0,0.D0,0.D0,XS(J,4),XS(J,5),XS(J,6))
C
C  CALCULATE ELEVATIONS  AND  AND TEST AGAINST HOR
      ELEV(J)=DASIN(EL)/RADG
C   CUT OFF TEST
      IF( J.EQ.1) GO TO 12
      K=J-1
      IF(ELEV(K).GE.HOR.AND.ELEV(J).GT.HOR) GO TO 9
      IF(KDPSI(K).EQ.0) GO TO 9
      KDPSI(K) =0
      DOP(K)= 0.
      NGR= NGR- 1
      NG(IS+K)= NG(IS+K) -1
      NJET=NJET+1
9     CONTINUE
C     COMPUTE  EL MAX
      IF(ELEV(J)- ELEV(K) ) 11,18,18
11    IF(IB.GE.2) GO TO 12
      IF(J.GT.2) GO TO 17
      ELMAX= ELEV(1)
      IB=2
      GO TO 12
17    ELMAX= (ELEV(J) -ELEV(J-2))**2/(8.D0*(2.D0*ELEV(K) -ELEV(J)-ELEV(J
     1-2)))+ELEV(K)
      JCPA= J
      KCPA= ICNT
      ICNT=0
      IB=IB+1
      GO TO 12
18    ELMAX= ELEV(J)
12    DET=               +ISHRT(J)         * ONE
      IF(KDPSI(J).NE.0.AND.T.LT.0.) WRITE(IOUT,2) J, NAME
      IF(KDPSI(J).NE.0) ICNT= ICNT+ 1
1      CONTINUE
C   TRIM ARROUND CPA  IF CPA =1
      LCPA= ICNT
      IF(ICPA.NE.1) GO TO 19
      IF(DABS(DBLE(LCPA-KCPA)) .LE.2.)GO TO 19
      ISS=JCPA +1
      IE= MGR
      KCOM= 0
      ICNT= KCPA +1
      II= -1
      IF(LCPA.GT.KCPA) GO TO 21
      ISS=1
      IE= JCPA
      KCOM= KCPA
      ICNT= LCPA
      II= 1
21      CONTINUE
      DO 22 I=ISS,IE
      IF(KDPSI(I).EQ.0) GO TO 22
      ICNT= ICNT + II
      IF(ICNT.GT.KCOM) GO TO 22
      KDPSI(I)= 0
      NG(IS+I)= NG(IS+I)- 1
      NGR= NGR -1
22      CONTINUE
19      CONTINUE
      TSPAN= T- IMIN +1
      IF( KDPSI(K).NE.0.AND.TSPAN.GT.0.) WRITE(IOUT,2) K, NAME
C6    CONTINUE
      RETURN
      END

